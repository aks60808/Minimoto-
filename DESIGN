
Extra Files in submitted tar
    - aws_config_script: a shell script for configuring client and watchdog remotely via ssh.
    - aws_config_script_service: a shell script for configuring service instance remotely via ssh.

Minimoto_setup

    #General steps

        1. configure AWS credential and config in ~/.aws
        2. extract key name from input key file
        3. create SQS
        4. create input and output bucket
        5. create security group
        6. launch instances with t2.large for service, client and watchdog
        7. configure service instance
        8. create service AMI
        9. configure client instance
        10. configure watchdog instance
        11. check status of service AMI

    #Things to know:

        Minimized output files:

            We used python file for all our service, however we only use pure shell aws cli command line rather than boto3.
            Subprocess lib is imported to our program for handling aws cli calls.

        Tags:

            During step 6, We added a tag for all Minimoto-related instances and a tag for only Minimoto service instances.
            The tag for Minimoto service instances can be used as a identifier while monitoring service instances for watchdog.
            And all running instances can be all terminated by another Minimoto tag for Minimoto-related instances during cleanup. 
        
        Configure Priority:
            We first configure Minimoto service instance for operating AMI image creation as soon as possible. During creating the AMI
            image based on Minimoto service instance, Minimoto service instance will be rebooted, so it will take a longer time to be available
            compared to client and watchdog instance.  

        General Configuration for all Minimoto instance:

            All configuration instructions for watchdog and client are in file:aws_config_script.
            All configuration instruction for service are in file:aws_config_script_service
            We scp things are required for running aws cli like credential and config in ~/.aws
            Since we use public ami image Ubuntu 16 from launching page, it is clean image at all.
            We install aws cli 2 for each of them. 

        Configuration of Minimoto service instance:

            We installed imagemagick and libav-tools for operating our transcode service.
            And for further monitoring CPU utilization, sysstat is also installed in service instance.
            Scheduling is also included for crontab to execute Minimoto_service regularly. 
            Service instances will need SQS url and name of buckets during execution.
            so we also scp a json file minimoto_info.json included the above information

        Configuration of Minimoto client instance: 

            client instance will have a json file minimoto_info.json for information of SQS url as well.

        Configuration of Minimoto watchdog instance:   
            watchdog will have key file .pem for further ssh to service instances.
            And a much more detailed json file minimoto_config.json including key name, security group id and Service AMI (launching service instances)
        
        Approximated Setup Time:
            it took ~4 minutes for only launching and configuring instances, however for availability of our service, we will 
            wait until the Service AMI is created and is available for launching new service instance based on this AMI.
            Hence, it usually took overall 6-8 minutes until the Service AMI is ready-to-use. But sometimes it would take close to 10 min when 
            traffic is busy.

Minimoto_cleanup

    #General steps

        1. delete buckets 
        2. delete sqs
        3. terminate all minimoto-related instances
        4. delete security group
        5. deregister Service AMI
        6. remove any output file generated by minimoto-related programs

    #Things to know:

        1. All information that minimoto_cleanup need is written by Minimoto_setup in minimoto_config.json.
        2. Before deleting security group, minimoto_cleanup will sleep for 60 sec waiting for terminationg of all instances
        3. Since all command is executed on Subprocess, so program can still be executed to the end with some error happened as long
            as there's no failure occurred in python.

Minimoto_watchdog

    #Automatically scaling
        
    #Forcedly scaling

    #Status check


Shortcomings 

    #Trancoding Service consume too much memory:

        While testing images close to 100, we will get our transcoding service killed by OOM Killer.
        Or sometimes watchdog try to run a mpstat command to monitor CPU utilization of Service instances,
        the output will be "-bash: fork: Cannot allocate memory".
        These outcome turn out that we need to restrict resource management for transcoding service.
        However we haven't implemented this since we don't have much time.

    #CPU utilization may not be accurate enough for determination of service productivity
        
        So far we measure our instances only by CPU utilization, but cannot really tell which program consume computing power.
        Might come up with some scenario, the program just hanging there infinitely and doing nothing valuable but watchdog still
        think this instance is busy converting images to mp4.
    
    #No mathematical support of our automatically scaling:
    
        We think there should be some researches of modelling scale. But we don't have any time investigate this.
        Our scaling policy is dumb but fine for small scale but may not be robust under the fact that requests length from SQS
        will fluctuate periodically in reality.

    #Maximum number of Service instances capped to 7

        We have issue with scaling out over 9 (1 client +ã€€1 watchdog + 7 services) total instances.
        we have successfully launched the command and get certain response.
        And also see the new launched instances changing state from pending to running, however after few seconds,
        the state will be changed to shutting-down then terminated.
        We suspect there is some policy limiting running instances while using education account