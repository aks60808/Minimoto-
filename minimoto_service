#!/usr/bin/env python3
import os
import json
import sys
import os.path
from os import path
import time
import subprocess
from subprocess import Popen, PIPE
# sqs_client = boto3.client('sqs')

def download_transcode_image(dir_path):
    download = "aws s3 cp  --recursive s3://tommy-unsw-9243-group22-minimoto-input-bucket/"+dir_path+"/ ./"+dir_path
    # print(download)
    os.system(download)
    transcode = "./transcode.sh ./"+dir_path+" "+dir_path+".mp4"
    os.system(transcode)
    print("transcode finish")


def receive_request():
    print("into recv")
    
    # resp = sqs_client.receive_message(
    #     QueueUrl='https://sqs.us-east-1.amazonaws.com/071520043157/unsw-9243-group22-minimoto-sqs.fifo',
    #     MaxNumberOfMessages=1
    # )
    # try:
    #     messages = resp['Messages']
        
    #     receive_handle = messages[0]["ReceiptHandle"]
    #     dir_path = messages[0]["Body"]
    #     # print("*** receive_handle ={}".format(receive_handle))
    #     print("*** message_body = {}".format(dir_path))
    #     download_transcode_image(dir_path)
    #     delete_request = "aws sqs delete-message --queue-url https://sqs.us-east-1.amazonaws.com/071520043157/unsw-9243-group22-minimoto-sqs.fifo --receipt-handle " +receive_handle +" > aws_delete_request"
    #     os.system(delete_request)
    #     del_sz = os.path.getsize("./aws_delete_request")
    #     if del_sz:
    #         # if transcode can not finish in 30mins
    #         # extend the visibility timw out to 90mins
    #         # and then delete the request
    #         set_attribute = "aws sqs set-queue-attributes --queue-url https://sqs.us-east-1.amazonaws.com/071520043157/unsw-9243-group22-minimoto-sqs.fifo --attributes ContentBasedDeduplication=true,VisibilityTimeout=9000"
    #         os.system(set_attribute)
    #         delete_request = "aws sqs delete-message --queue-url https://sqs.us-east-1.amazonaws.com/071520043157/unsw-9243-group22-minimoto-sqs.fifo --receipt-handle " +receive_handle +" > aws_delete_request"
    #         os.system(delete_request)
    #     upload_output_bucket = "aws s3 cp ./"+dir_path+".mp4 s3://tommy-unsw-9243-group22-minimoto-output-bucket/"+dir_path+".mp4"
    #     os.system(upload_output_bucket)
    #     print("upload mp4 file")
    # except KeyError:
    #     print('No messages on the queue!')
    #     sys.exit("No request in the queue. Exit")
    receive_request = "aws sqs receive-message --queue-url https://sqs.us-east-1.amazonaws.com/071520043157/unsw-9243-group22-minimoto-sqs.fifo  --max-number-of-messages 1"
    receive_request_proc = Popen(receive_request,stdout=subprocess.PIPE, stderr=None, shell=True)
    output, err = receive_request_proc.communicate()
    if output.decode() == '': 
        print("No request in the queue")
        # no request return
        sys.exit("No request in the queue. Exit")
    else:
        rq_data = json.loads(output.decode().rstrip())
        receive_handle = rq_data["Messages"][0]["ReceiptHandle"]
        dir_path = rq_data["Messages"][0]["Body"]
        # print("*** receive_handle ={}".format(receive_handle))
        print("*** message_body = {}".format(dir_path))
        download_transcode_image(dir_path)
        delete_request = "aws sqs delete-message --queue-url https://sqs.us-east-1.amazonaws.com/071520043157/unsw-9243-group22-minimoto-sqs.fifo --receipt-handle " +receive_handle +" > aws_delete_request"
        os.system(delete_request)
        del_sz = os.path.getsize("./aws_delete_request")
        if del_sz:
            # if transcode can not finish in 30mins
            # extend the visibility timw out to 90mins
            # and then delete the request
            set_attribute = "aws sqs set-queue-attributes --queue-url https://sqs.us-east-1.amazonaws.com/071520043157/unsw-9243-group22-minimoto-sqs.fifo --attributes ContentBasedDeduplication=true,VisibilityTimeout=9000"
            os.system(set_attribute)
            delete_request = "aws sqs delete-message --queue-url https://sqs.us-east-1.amazonaws.com/071520043157/unsw-9243-group22-minimoto-sqs.fifo --receipt-handle " +receive_handle +" > aws_delete_request"
            os.system(delete_request)
        upload_output_bucket = "aws s3 cp ./"+dir_path+".mp4 s3://tommy-unsw-9243-group22-minimoto-output-bucket/"+dir_path+".mp4"
        os.system(upload_output_bucket)
        print("upload mp4 file")
        # process_request()

def check_only_service():
    check_service = "ps -aux | egrep minimoto_service | wc -l | sed -e 's/[ ]*//'"
    check_service_proc = Popen(check_service,stdout=subprocess.PIPE, stderr=None, shell=True)
    output, err = check_service_proc.communicate()
    status = output.decode().rstrip()
    print(status)
    if status == '3':
        print("*** start receive request")
    else:
        print("Have other service process already")
        sys.exit("Have other service process already.Exit")
            

def main():
    print("*** checking if other service program already exists....")
    check_only_service()
    receive_request()


if __name__ == "__main__":
    main()