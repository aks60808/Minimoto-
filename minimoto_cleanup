#!/usr/bin/env python3
import os
import time
import json
import subprocess

def terminate_all_minimoto_instances():
    ### terminate all minimoto-related instances 
    terminate_instance  = "aws ec2 terminate-instances --instance-ids `aws ec2 describe-instances --filters Name=tag-key,Values=Minimoto --query Reservations[].Instances[].InstanceId --output text`"
    subprocess.call(terminate_instance, shell=True,stdout =subprocess.DEVNULL)

def delete_security_group_by_name(sg_name):
    ### delete security group
    command = "aws ec2 delete-security-group --group-name " + sg_name
    os.system(command)

def delete_buckets(input_bucket_name,output_bucket_name):
    ### delete buckets
    command_1 = "aws s3 rb s3://" + input_bucket_name + " --region us-east-1 --force "
    command_2 = "aws s3 rb s3://" + output_bucket_name + " --region us-east-1 --force "
    os.system(command_1)
    os.system(command_2)

def delete_sqs(sqs_url):
    ### delete sqs
    command = "aws sqs delete-queue --queue-url " + sqs_url
    os.system(command)

def deregister_AMI(ami_id):
    ### deregister AMI
    command = "aws ec2 deregister-image --image-id " + ami_id
    os.system(command)

def main():
    ### open pre-existed json file created by setup program
    with open('minimoto_config.json') as json_file:
        data = json.load(json_file)
    ### delete buckets
    delete_buckets(data["S3_INPUT"],data["S3_OUTPUT"])
    ### delete sqs
    delete_sqs(data['SQS_URL'])
    ### terminate all instances related to minimoto
    terminate_all_minimoto_instances()
    ### wait untill all of them are terminated
    time.sleep(60)
    ### now we can delete security group without any dependency issue
    delete_security_group_by_name(data['SG_NAME'])
    ### delete the AMI
    deregister_AMI(data['SERVICE_AMI'])
    ### remove the files generated by minimoto-related progams
    os.system("rm ./minimoto_info.json ./minimoto_config.json")

if __name__ == "__main__":
    main()